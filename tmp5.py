#!/usr/bin/python3

import sys
import os
import re
import csv
import subprocess
import requests
from bs4 import BeautifulSoup
import multiprocessing

# command verification 
args = sys.argv

if len(args) !=2:
    sys.exit("\nError\nUsage: python3 [program].py [input file name]\n")

# initial parameters
file_input = args[1]
file_prefix = file_input.split('.')[0]
path_input = os.getcwd()
num_threads = multiprocessing.cpu_count()

# clean up of previous run
r1 = os.path.exists('organism_list.tsv')

if r1 == True:
    os.remove('organism_list.tsv')
    print('\nNote: organism_list.tsv generated by previous run has been removed.\n')
else:
    print('\nNo old tsv file found. OK\n')

r2 = os.path.exists('sequence_list.fasta')

if r2 == True:
    os.remove('sequence_list.fasta')
    print('\nNote: sequence_list.fasta generated by previous run has been removed.\n')
else:
    print('\nNo old fasta file found. OK\n')

# splitting input file by entry
with open(file_input, "r") as f:
    data = f.read()
    entries = data.split('//\n')

# extraction and file output
for entry in entries:
    if 'LOCUS' in entry:
        p1 = r'ACCESSION   (.*)\n'
        accession = re.findall(p1, entry)
        p2 = r'/organism="(.*)"'
        organism = re.findall(p2, entry)
        target = 'ORIGIN'
        idx = entry.find(target)
        origin = entry[idx+6:]
        sequence = re.sub(r"[\d ]", "", origin)
    else:
        pass

    list1 = accession + organism
    output_file1 = 'organism_list.tsv'
    output_file2 = 'sequence_list.fasta'

    with open(output_file1, "a") as f:
        writer = csv.writer(f, delimiter='\t')
        writer.writerow(list1)

    with open(output_file2, "a") as f:
        f.write('>')
        f.writelines(accession)
        f.writelines(sequence)

# execute BLAST
output_file3 = file_prefix + '.blastn'
cmd_list = ['blastn','-query',output_file2,'-db','/mnt/ssd/blastdbv5/nt','-out',output_file3,'-num_threads',num_threads]
cmd = map(str, cmd_list)

print(f'\nrunning blast ({num_threads} threads reserved)\nkeyboard interrupt: Ctrl+C\n')

blastn_run = subprocess.run(cmd)
#blastn_run = subprocess.Popen(f'blastn -query {output_file2} -db /mnt/ssd/blastdbv5/nt -out {output_file3}  -num_threads {num_threads}', shell=True)
#blastn_run = subprocess.run(f'blastn -query {output_file2} -db /mnt/ssd/blastdbv5/nt -out {output_file3}  -num_threads {num_threads}', shell=True)

if blastn_run.returncode != 0 or os.path.getsize(output_file3) < 20:
    sys.exit("\nError\nblast could not run correctly. Check output, environment, etc.\n")
else:
    print('\nblast finished\n')



# splitting blastn result by entry
#with open(file_input, "r") as f:
#    data = f.read()
#    entries = re.split('Effective search space used: \d+\n', data)
